// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiliNeu.DataAccess.Data;

#nullable disable

namespace MiliNeu.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250110222819_AddedCategoryModel")]
    partial class AddedCategoryModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MiliNeu.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApartmentSuite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MiliNeu.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MiliNeu.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MiliNeu.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SelectedSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MiliNeu.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Women"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Unisex"
                        });
                });

            modelBuilder.Entity("MiliNeu.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Summer",
                            Description = "Description",
                            Name = "Bloom & Breeze",
                            Price = 50000.34765m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(1757)
                        },
                        new
                        {
                            Id = 2,
                            Category = "Winter",
                            Description = "Description",
                            Name = "Tribal Terra",
                            Price = 65000.7894m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(1762)
                        });
                });

            modelBuilder.Entity("MiliNeu.Models.CollectionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("CollectionImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CollectionId = 1,
                            IsMain = true,
                            Path = "BloomB.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CollectionId = 2,
                            IsMain = true,
                            Path = "TribalT.jpg"
                        });
                });

            modelBuilder.Entity("MiliNeu.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HexCode = "#FF0000",
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            HexCode = "#00FF00",
                            Name = "Green"
                        },
                        new
                        {
                            Id = 3,
                            HexCode = "#0000FF",
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 4,
                            HexCode = "#000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = 5,
                            HexCode = "#FFFFFF",
                            Name = "White"
                        },
                        new
                        {
                            Id = 6,
                            HexCode = "#FFFF00",
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 7,
                            HexCode = "#800080",
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 8,
                            HexCode = "#FFA500",
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 9,
                            HexCode = "#FFC0CB",
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 10,
                            HexCode = "#A52A2A",
                            Name = "Brown"
                        });
                });

            modelBuilder.Entity("MiliNeu.Models.HeroSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HeroSectionImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HeroSectionImageId")
                        .IsUnique();

                    b.ToTable("HeroSections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HeroSectionImageId = 1,
                            IsActive = true,
                            Link = "/Products/BestSellers",
                            Title = "BESTSELLERS"
                        },
                        new
                        {
                            Id = 2,
                            HeroSectionImageId = 2,
                            IsActive = true,
                            Link = "/Products/Sale",
                            Title = "SALE"
                        },
                        new
                        {
                            Id = 3,
                            HeroSectionImageId = 3,
                            IsActive = true,
                            Link = "/Products/Index",
                            Title = "SHOP"
                        });
                });

            modelBuilder.Entity("MiliNeu.Models.HeroSectionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HeroSectionImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Path = "sydney-sweeney.JPG"
                        },
                        new
                        {
                            Id = 2,
                            Path = "sabrina-carpenter.JPG"
                        },
                        new
                        {
                            Id = 3,
                            Path = "sydney-sweeney2.JPG"
                        });
                });

            modelBuilder.Entity("MiliNeu.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountApplied")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EstimatedDeliveryBy")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("PaymentCaptured")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("RazorOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazorPaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazorPaymentSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazorReceiptId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnInitiatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReturnStatus")
                        .HasColumnType("int");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MiliNeu.Models.OrderAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApartmentSuite")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("OrderAddress");
                });

            modelBuilder.Entity("MiliNeu.Models.OrderIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderIssues");
                });

            modelBuilder.Entity("MiliNeu.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SelectedSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MiliNeu.Models.PaymentStatusAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewStatus")
                        .HasColumnType("int");

                    b.Property<int>("OldStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("PaymentStatusAudits");
                });

            modelBuilder.Entity("MiliNeu.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalesCount")
                        .HasColumnType("int");

                    b.Property<string>("SizeChartPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CollectionId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CollectionId = 1,
                            Description = "Floral Midi Dress – A breezy, mid-length dress featuring a vibrant floral print, perfect for casual outings or summer events.",
                            DiscountedPrice = 3900.00m,
                            IsDiscontinued = false,
                            Name = "A-line Dress",
                            Price = 5000.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2332),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CollectionId = 2,
                            Description = "Lace Evening Gown – A sophisticated full-length gown with delicate lace details, ideal for formal occasions and black-tie events.",
                            DiscountedPrice = 4800.00m,
                            IsDiscontinued = false,
                            Name = "Maxi Dress",
                            Price = 5000.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2338),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CollectionId = 1,
                            Description = "Bohemian Maxi Dress – Flowing and relaxed, this floor-length dress boasts boho-inspired patterns and an effortless silhouette.",
                            DiscountedPrice = 2700.00m,
                            IsDiscontinued = false,
                            Name = "Sheath Dress",
                            Price = 7000.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2343),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CollectionId = 2,
                            Description = "Shift Dress – A simple, straight-cut dress that falls loosely from the shoulders, great for a chic, minimalistic look.",
                            DiscountedPrice = 5600.00m,
                            IsDiscontinued = false,
                            Name = "Shift Dress",
                            Price = 8000.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2348),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CollectionId = 1,
                            Description = "Bodycon Dress – A form-fitting dress that hugs your curves, making it a sleek option for nights out or parties.",
                            DiscountedPrice = 4500.00m,
                            IsDiscontinued = false,
                            Name = "Wrap Dress",
                            Price = 4800.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2353),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CollectionId = 2,
                            Description = "A-Line Cocktail Dress – A flattering dress with a fitted bodice and a flared skirt, perfect for semi-formal occasions.",
                            DiscountedPrice = 3400.00m,
                            IsDiscontinued = false,
                            Name = "Bodycon Dress",
                            Price = 4000.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2357),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CollectionId = 1,
                            Description = "Shirt Dress – A casual dress designed like a button-down shirt, offering both comfort and versatility.",
                            DiscountedPrice = 3300.00m,
                            IsDiscontinued = false,
                            Name = "Peplum Dress",
                            Price = 2000.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2362),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CollectionId = 2,
                            Description = "Wrap Dress – A classic design featuring a wrap-around style that cinches at the waist, providing a flattering fit.",
                            DiscountedPrice = 4100.00m,
                            IsDiscontinued = false,
                            Name = "Empire Waist Dress",
                            Price = 5000.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2366),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            CollectionId = 1,
                            Description = "Off-Shoulder Ruffle Dress – A playful dress with an off-the-shoulder neckline and ruffle details, great for a stylish yet fun look.",
                            DiscountedPrice = 2100.00m,
                            IsDiscontinued = false,
                            Name = "Fit and Flare Dress",
                            Price = 2000.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2371),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CollectionId = 2,
                            Description = "Embroidered Tunic Dress – A relaxed tunic dress adorned with intricate embroidery, perfect for a bohemian or artistic vibe.",
                            DiscountedPrice = 2900.00m,
                            IsDiscontinued = false,
                            Name = "Tunic Dress",
                            Price = 9000.00m,
                            ReleaseDate = new DateTime(2025, 1, 10, 22, 28, 17, 477, DateTimeKind.Local).AddTicks(2377),
                            SalesCount = 0,
                            SizeChartPath = "SizeChart1.JPG"
                        });
                });

            modelBuilder.Entity("MiliNeu.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("isMain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            IsDiscontinued = false,
                            ProductId = 1,
                            isMain = true
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 2,
                            IsDiscontinued = false,
                            ProductId = 1,
                            isMain = false
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 3,
                            IsDiscontinued = false,
                            ProductId = 2,
                            isMain = true
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 4,
                            IsDiscontinued = false,
                            ProductId = 3,
                            isMain = true
                        },
                        new
                        {
                            Id = 5,
                            ColorId = 5,
                            IsDiscontinued = false,
                            ProductId = 4,
                            isMain = true
                        },
                        new
                        {
                            Id = 6,
                            ColorId = 6,
                            IsDiscontinued = false,
                            ProductId = 4,
                            isMain = false
                        },
                        new
                        {
                            Id = 7,
                            ColorId = 7,
                            IsDiscontinued = false,
                            ProductId = 5,
                            isMain = true
                        },
                        new
                        {
                            Id = 8,
                            ColorId = 8,
                            IsDiscontinued = false,
                            ProductId = 6,
                            isMain = true
                        },
                        new
                        {
                            Id = 9,
                            ColorId = 9,
                            IsDiscontinued = false,
                            ProductId = 7,
                            isMain = true
                        },
                        new
                        {
                            Id = 10,
                            ColorId = 10,
                            IsDiscontinued = false,
                            ProductId = 7,
                            isMain = false
                        },
                        new
                        {
                            Id = 11,
                            ColorId = 1,
                            IsDiscontinued = false,
                            ProductId = 8,
                            isMain = true
                        },
                        new
                        {
                            Id = 12,
                            ColorId = 2,
                            IsDiscontinued = false,
                            ProductId = 9,
                            isMain = true
                        },
                        new
                        {
                            Id = 13,
                            ColorId = 3,
                            IsDiscontinued = false,
                            ProductId = 10,
                            isMain = true
                        });
                });

            modelBuilder.Entity("MiliNeu.Models.VariantImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("VariantImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            Path = "1.JPG",
                            ProductVariantId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsMain = true,
                            Path = "2.JPG",
                            ProductVariantId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsMain = true,
                            Path = "3.WEBP",
                            ProductVariantId = 3
                        },
                        new
                        {
                            Id = 4,
                            IsMain = true,
                            Path = "4.JPG",
                            ProductVariantId = 4
                        },
                        new
                        {
                            Id = 5,
                            IsMain = true,
                            Path = "5.JPG",
                            ProductVariantId = 5
                        },
                        new
                        {
                            Id = 6,
                            IsMain = true,
                            Path = "6.JPG",
                            ProductVariantId = 6
                        },
                        new
                        {
                            Id = 7,
                            IsMain = true,
                            Path = "7.JPG",
                            ProductVariantId = 7
                        },
                        new
                        {
                            Id = 8,
                            IsMain = true,
                            Path = "8.JPG",
                            ProductVariantId = 8
                        },
                        new
                        {
                            Id = 9,
                            IsMain = true,
                            Path = "9.JPG",
                            ProductVariantId = 9
                        },
                        new
                        {
                            Id = 10,
                            IsMain = true,
                            Path = "10.WEBP",
                            ProductVariantId = 10
                        },
                        new
                        {
                            Id = 11,
                            IsMain = true,
                            Path = "11.JPG",
                            ProductVariantId = 11
                        },
                        new
                        {
                            Id = 12,
                            IsMain = true,
                            Path = "12.JPG",
                            ProductVariantId = 12
                        },
                        new
                        {
                            Id = 13,
                            IsMain = true,
                            Path = "13.JPG",
                            ProductVariantId = 13
                        },
                        new
                        {
                            Id = 14,
                            IsMain = false,
                            Path = "14.JPG",
                            ProductVariantId = 1
                        },
                        new
                        {
                            Id = 15,
                            IsMain = false,
                            Path = "15.JPG",
                            ProductVariantId = 2
                        },
                        new
                        {
                            Id = 16,
                            IsMain = false,
                            Path = "16.JPG",
                            ProductVariantId = 3
                        },
                        new
                        {
                            Id = 17,
                            IsMain = false,
                            Path = "17.JPG",
                            ProductVariantId = 4
                        },
                        new
                        {
                            Id = 18,
                            IsMain = false,
                            Path = "18.JPG",
                            ProductVariantId = 5
                        },
                        new
                        {
                            Id = 19,
                            IsMain = false,
                            Path = "19.JPG",
                            ProductVariantId = 6
                        },
                        new
                        {
                            Id = 20,
                            IsMain = false,
                            Path = "20.JPG",
                            ProductVariantId = 7
                        },
                        new
                        {
                            Id = 21,
                            IsMain = false,
                            Path = "21.JPG",
                            ProductVariantId = 8
                        },
                        new
                        {
                            Id = 22,
                            IsMain = false,
                            Path = "22.JPG",
                            ProductVariantId = 9
                        },
                        new
                        {
                            Id = 23,
                            IsMain = false,
                            Path = "23.JPG",
                            ProductVariantId = 10
                        },
                        new
                        {
                            Id = 24,
                            IsMain = false,
                            Path = "24.JPG",
                            ProductVariantId = 11
                        });
                });

            modelBuilder.Entity("VisitorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionsPageVisits")
                        .HasColumnType("int");

                    b.Property<bool>("IsConverted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsPageVisits")
                        .HasColumnType("int");

                    b.Property<string>("Referrer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VisitorLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MiliNeu.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MiliNeu.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiliNeu.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MiliNeu.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiliNeu.Models.Address", b =>
                {
                    b.HasOne("MiliNeu.Models.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiliNeu.Models.ApplicationUser", b =>
                {
                    b.HasOne("MiliNeu.Models.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("MiliNeu.Models.ApplicationUser", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("MiliNeu.Models.CartItem", b =>
                {
                    b.HasOne("MiliNeu.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiliNeu.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MiliNeu.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("MiliNeu.Models.CollectionImage", b =>
                {
                    b.HasOne("MiliNeu.Models.Collection", "Collection")
                        .WithMany("Images")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("MiliNeu.Models.HeroSection", b =>
                {
                    b.HasOne("MiliNeu.Models.HeroSectionImage", "Image")
                        .WithOne("HeroSection")
                        .HasForeignKey("MiliNeu.Models.HeroSection", "HeroSectionImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MiliNeu.Models.Order", b =>
                {
                    b.HasOne("MiliNeu.Models.OrderAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiliNeu.Models.ApplicationUser", "User")
                        .WithMany("UserOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiliNeu.Models.OrderIssue", b =>
                {
                    b.HasOne("MiliNeu.Models.Order", "Order")
                        .WithMany("OrderIssues")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiliNeu.Models.ApplicationUser", "User")
                        .WithMany("OrderIssues")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiliNeu.Models.OrderItem", b =>
                {
                    b.HasOne("MiliNeu.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MiliNeu.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MiliNeu.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("MiliNeu.Models.PaymentStatusAudit", b =>
                {
                    b.HasOne("MiliNeu.Models.Order", "Order")
                        .WithMany("PaymentStatusAudits")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MiliNeu.Models.Product", b =>
                {
                    b.HasOne("MiliNeu.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiliNeu.Models.Collection", "Collection")
                        .WithMany("Products")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("MiliNeu.Models.ProductVariant", b =>
                {
                    b.HasOne("MiliNeu.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiliNeu.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MiliNeu.Models.VariantImage", b =>
                {
                    b.HasOne("MiliNeu.Models.ProductVariant", "ProductVariant")
                        .WithMany("Images")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("MiliNeu.Models.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("OrderIssues");

                    b.Navigation("UserOrders");
                });

            modelBuilder.Entity("MiliNeu.Models.Cart", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiliNeu.Models.Collection", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MiliNeu.Models.HeroSectionImage", b =>
                {
                    b.Navigation("HeroSection")
                        .IsRequired();
                });

            modelBuilder.Entity("MiliNeu.Models.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("OrderIssues");

                    b.Navigation("PaymentStatusAudits");
                });

            modelBuilder.Entity("MiliNeu.Models.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("MiliNeu.Models.ProductVariant", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
